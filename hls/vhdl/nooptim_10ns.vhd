-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mask_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mask_ce0 : OUT STD_LOGIC;
    mask_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    mean : OUT STD_LOGIC_VECTOR (15 downto 0);
    mean_ap_vld : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc3s500efg320-4,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.125000,HLS_SYN_LAT=36,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=212,HLS_SYN_LUT=155}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv34_1C71D : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000011100011100011101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal i_1_fu_159_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_328 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_63 : BOOLEAN;
    signal tmp_10_fu_181_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_333 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_197_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_reg_338 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_349 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_fu_225_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_357 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_86 : BOOLEAN;
    signal tmp_12_cast_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_255_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_382 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_106 : BOOLEAN;
    signal mask_load_reg_387 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_296_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_392 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal neg_ti_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal neg_ti_reg_397 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_123 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_138 : BOOLEAN;
    signal total_fu_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal total_1_fu_266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_154 : BOOLEAN;
    signal tmp_9_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_169_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_177_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_165_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_191_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_fu_191_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_5_cast_fu_231_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_255_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal neg_mul_fu_277_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_13_fu_282_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_292_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_299_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_219_p2)))) then 
                i_reg_123 <= i_1_reg_328;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_123 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_reg_134 <= j_1_reg_357;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_153_p2 = ap_const_lv1_0))) then 
                j_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    total_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                total_fu_64 <= total_1_fu_266_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                total_fu_64 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_328 <= i_1_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_357 <= j_1_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                mask_load_reg_387 <= mask_q0;
                tmp_8_reg_382 <= tmp_8_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_5_reg_343)))) then
                neg_ti_reg_397 <= neg_ti_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_153_p2 = ap_const_lv1_0))) then
                tmp_10_reg_333 <= tmp_10_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_219_p2))) then
                tmp_12_cast_reg_362 <= tmp_12_cast_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_153_p2 = ap_const_lv1_0)))) then
                tmp_14_reg_349 <= mul_fu_191_p2(33 downto 20);
                tmp_3_reg_338 <= tmp_3_fu_197_p1;
                tmp_5_reg_343 <= total_fu_64(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_2_reg_392 <= tmp_2_fu_296_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_153_p2, exitcond_fu_219_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond1_fu_153_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_219_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_106 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_138 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_154 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_63 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_86 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_63)
    begin
        if (ap_sig_63) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_86)
    begin
        if (ap_sig_86) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_106)
    begin
        if (ap_sig_106) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_138)
    begin
        if (ap_sig_138) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_154)
    begin
        if (ap_sig_154) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_153_p2 <= "1" when (i_reg_123 = ap_const_lv2_3) else "0";
    exitcond_fu_219_p2 <= "1" when (j_reg_134 = ap_const_lv2_3) else "0";
    i_1_fu_159_p2 <= std_logic_vector(unsigned(i_reg_123) + unsigned(ap_const_lv2_1));
    input_r_address0 <= tmp_12_cast_fu_240_p1(4 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_225_p2 <= std_logic_vector(unsigned(j_reg_134) + unsigned(ap_const_lv2_1));
    mask_address0 <= tmp_12_cast_fu_240_p1(4 - 1 downto 0);

    mask_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            mask_ce0 <= ap_const_logic_1;
        else 
            mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean <= 
        neg_ti_reg_397 when (tmp_5_reg_343(0) = '1') else 
        tmp_2_reg_392;

    mean_ap_vld_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            mean_ap_vld <= ap_const_logic_1;
        else 
            mean_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_191_p1 <= total_fu_64;
    mul_fu_191_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &ap_const_lv34_1C71D) * signed(mul_fu_191_p1))), 34));
    neg_mul_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(tmp_3_reg_338));
    neg_ti_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_4_fu_299_p3));
    output_r_address0 <= tmp_12_cast_reg_362(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_9_fu_261_p2;

    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_177_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_169_p3),5));
    tmp_10_fu_181_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_177_p1) - unsigned(tmp_3_cast_fu_165_p1));
    tmp_11_fu_235_p2 <= std_logic_vector(unsigned(tmp_10_reg_333) + unsigned(tmp_5_cast_fu_231_p1));
        tmp_12_cast_fu_240_p1 <= std_logic_vector(resize(signed(tmp_11_fu_235_p2),64));

    tmp_13_fu_282_p4 <= neg_mul_fu_277_p2(32 downto 20);
        tmp_2_fu_296_p1 <= std_logic_vector(resize(signed(tmp_14_reg_349),16));

    tmp_3_cast_fu_165_p1 <= std_logic_vector(resize(unsigned(i_reg_123),5));
    tmp_3_fu_197_p1 <= mul_fu_191_p2(33 - 1 downto 0);
    tmp_4_fu_299_p3 <= 
        tmp_fu_292_p1 when (tmp_5_reg_343(0) = '1') else 
        tmp_2_fu_296_p1;
    tmp_5_cast_fu_231_p1 <= std_logic_vector(resize(unsigned(j_reg_134),5));
    tmp_8_fu_255_p0 <= weight_q0;
    tmp_8_fu_255_p1 <= input_r_q0;
    tmp_8_fu_255_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_fu_255_p0) * signed(tmp_8_fu_255_p1))), 16));
    tmp_9_fu_261_p2 <= (mask_load_reg_387 and tmp_8_reg_382);
        tmp_fu_292_p1 <= std_logic_vector(resize(signed(tmp_13_fu_282_p4),16));

    tmp_s_fu_169_p3 <= (i_reg_123 & ap_const_lv2_0);
    total_1_fu_266_p2 <= std_logic_vector(unsigned(total_fu_64) + unsigned(tmp_9_fu_261_p2));
    weight_address0 <= tmp_12_cast_fu_240_p1(4 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
